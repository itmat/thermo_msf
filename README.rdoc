= Thermo MSF Parser

A library for accessing Thermo's ProteomeDiscoverer's MSF result file format. MSF files are SQLite3-based, so the this interface represents a simple API using Sequel that is directly translatable to the database's schema. Since this is a database, and Ruby's SQLite3 driver does not support read-onl connections, this API can both read and write to the file. This bears repeating:

<font style="font-style: bold; color: #F00"><blink>THE CONNECTION CAN WRITE DATA, SO BE CAREFUL!!</blink></font>

With that out of the way, here is how one uses this library


== Usage

Here is how to retrieve peptide information from an MSF file

  # require 'rubygems' # uncomment if needed
  require 'thermo_msf'
  # open the MSF file for reading
  msf = ThermoMSF::Base.new("path/to/msf/file/exampe.msf")
  # Get the peptides table
  peptides_table = msf.peptide
  # What are your primary keys?
  peptides_table.primary_key #=> [:ProcessingNodeNumber, :PeptideID]
  # Get the first peptide in the DB to see what it is.
  peptide = peptides_table.first
  # print it out to see what is in there
  puts peptide.to_yaml
    # Outputs the following
    # --- !ruby/object:ThermoMSF::Model::Peptide
    # new: false
    # values:
    #   :Sequence: CLIIGAGPCGLR
    #   :MatchedIonsCount: 13
    #   :Annotation:
    #   :SpectrumID: 96
    #   :ConfidenceLevel: 1
    #   :ProcessingNodeNumber: 2
    #   :Hidden: false
    #   :PeptideID: 2
    #   :TotalIonsCount: 44

"PeptideID" is an integer key value within this MSF file for a given peptide. "ProcessingNodeNumber" is
(what I guess to be) the algorithm that produced this particular peptide match to a spectrum. Interegating the
MSF file, we see that ProcessingNodeNumber is Sequest

  # Query for the processing node from the
  processing_node = msf.processing_node.filter(:ProcessingNodeNumber=> 2)
  processing_node.friendly_name # => "SEQUEST"


== Getting the Spectra Data

MSF files store the spectra that were sent to the search engine, including all headers such as parent mass charge state, isolation windows, retention time (in minutes), etc.,but they are stored in slightly complex way. The Spectrum object/table has a \#spectrum column that stores the spectrum's annotation and data peaks in an custom XML format. Furthermore, that XML file is compressed with zlib. Here is how to use this library to expand the XML:

  sp = Spectrum.first
  xml =  ThermoMSF::ZipSpectrum.read(sp.spectrum).spectrum_xml

Not great, but it'll do for now, until I get a chance to write a better set of methods to get at the data directly from the spectrum class.


== Note on Patches/Pull Requests

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 ITMAT Bioinformatics Facility, School of Medicine, UPENN.
See LICENSE for details.
